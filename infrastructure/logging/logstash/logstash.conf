# Logstash configuration for DDV system

input {
  beats {
    port => 5044
  }
  
  tcp {
    port => 5000
    codec => json_lines
  }
  
  udp {
    port => 5000
    codec => json_lines
  }
  
  file {
    path => "/var/log/ddv/*.log"
    type => "ddv"
    start_position => "beginning"
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => "previous"
    }
  }
}

filter {
  if [type] == "ddv" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:level}\] %{GREEDYDATA:message}" }
    }
    
    date {
      match => [ "timestamp", "ISO8601" ]
    }
    
    mutate {
      add_field => { "service" => "ddv" }
      remove_field => [ "timestamp" ]
    }
  }
  
  if [fields][service] {
    mutate {
      add_field => { "service_name" => "%{[fields][service]}" }
    }
  }
  
  # Parse JSON logs
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      target => "parsed"
    }
    
    if [parsed][level] {
      mutate {
        add_field => { "log_level" => "%{[parsed][level]}" }
      }
    }
    
    if [parsed][service] {
      mutate {
        add_field => { "service_name" => "%{[parsed][service]}" }
      }
    }
    
    if [parsed][request_id] {
      mutate {
        add_field => { "request_id" => "%{[parsed][request_id]}" }
      }
    }
  }
  
  # Parse HTTP access logs
  if [message] =~ /^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/ {
    grok {
      match => { "message" => "%{IPORHOST:client_ip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] \"%{WORD:verb} %{URIPATH:path} HTTP/%{NUMBER:http_version}\" %{NUMBER:response_code} %{NUMBER:bytes}" }
    }
    
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    
    mutate {
      add_field => { "log_type" => "access" }
    }
  }
  
  # Parse error logs
  if [message] =~ /ERROR/ {
    mutate {
      add_field => { "log_level" => "ERROR" }
    }
  }
  
  # Parse warning logs
  if [message] =~ /WARN/ {
    mutate {
      add_field => { "log_level" => "WARN" }
    }
  }
  
  # Parse info logs
  if [message] =~ /INFO/ {
    mutate {
      add_field => { "log_level" => "INFO" }
    }
  }
  
  # Parse debug logs
  if [message] =~ /DEBUG/ {
    mutate {
      add_field => { "log_level" => "DEBUG" }
    }
  }
  
  # Parse trace logs
  if [message] =~ /TRACE/ {
    mutate {
      add_field => { "log_level" => "TRACE" }
    }
  }
  
  # Add environment information
  mutate {
    add_field => { "environment" => "%{[@metadata][environment]}" }
    add_field => { "cluster" => "ddv-cluster" }
  }
  
  # Remove empty fields
  mutate {
    remove_field => [ "parsed" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "ddv-logs-%{+YYYY.MM.dd}"
    template_name => "ddv-logs"
    template => "/usr/share/logstash/templates/ddv-logs.json"
    template_overwrite => true
  }
  
  # Debug output
  stdout {
    codec => rubydebug
  }
}
